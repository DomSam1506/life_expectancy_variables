na_rate <- sapply(df_clean, function(col) mean(is.na(col)))
na_tbl <- tibble(var = names(na_rate), na_rate = as.numeric(na_rate)) |>
arrange(desc(na_rate))
df_clean <- raw %>%
filter(!is.na(life_expectancy)) %>%
mutate(status = as.factor(status), year = as.integer(year))
na_rate <- sapply(df_clean, function(col) mean(is.na(col)))
na_tbl <- tibble(var = names(na_rate), na_rate = as.numeric(na_rate)) |>
arrange(desc(na_rate))
print(na_tbl)
# Convert status to factor and year to integer
df_clean <- raw %>%
mutate(status = as.factor(status), year = as.integer(year))
# Remove country identifier to focus on predictors
df_clean <- df_clean %>% select(-country)
# Convert status to factor and year to integer
df_clean <- raw %>%
mutate(status = as.factor(status), year = as.integer(year))
# Remove country identifier to focus on predictors
df_clean <- df_clean %>% select(-country)
glimpse(df_clean)
ggplot(df_clean, aes(life_expectancy)) + geom_histogram(bins = 30)
num_only <- df_clean |> select(where(is.numeric))
ggpairs(num_only[, 1:min(8, ncol(num_only))], progress = FALSE)
num_only <- df_clean |> select(where(is.numeric)) %>% select(-year)
ggpairs(num_only[, 1:min(8, ncol(num_only))], progress = FALSE)
num_only <- df_clean |> select(where(is.numeric)) %>% select(-year)
ggpairs(num_only[, 1:min(6, ncol(num_only))], progress = FALSE)
num_only <- df_clean |> select(where(is.numeric)) %>% select(-year)
ggpairs(num_only[, 1:min(6, ncol(num_only))], progress = FALSE)
ggplot(df_clean, aes(x = schooling, y = life_expectancy, color = status)) +
geom_point(alpha = 0.6) +
geom_smooth(method = "lm", se = FALSE)
library(tidyverse)
library(janitor)
library(skimr)
library(GGally)
raw_url <- "https://raw.githubusercontent.com/selva86/datasets/master/Life_Expectancy_Data.csv"
dest    <- "data/Life_Expectancy_Data.csv"
if (!file.exists(dest)) {
download.file(raw_url, destfile = dest, mode = "wb")
}
raw <- read_csv(dest) |> clean_names()
skim(raw)
# Convert status to factor and year to integer
df_clean <- raw %>%
mutate(status = as.factor(status), year = as.integer(year))
# Select only Developing Countries from this century(up to 2015)
df_clean <- df_clean %>%
filter(status == 'Developing', year >=2000, year <=2015)
# Remove country identifier to focus on predictors
df_clean <- df_clean %>% select(-country,-status)
glimpse(df_clean)
ggplot(df_clean, aes(life_expectancy)) + geom_histogram(bins = 30)
num_only <- df_clean |> select(where(is.numeric)) %>% select(-year)
ggpairs(num_only[, 1:min(6, ncol(num_only))], progress = FALSE)
library(tidyverse)
library(janitor)
library(skimr)
library(GGally)
raw_url <- "https://raw.githubusercontent.com/selva86/datasets/master/Life_Expectancy_Data.csv"
dest    <- "data/Life_Expectancy_Data.csv"
if (!file.exists(dest)) {
download.file(raw_url, destfile = dest, mode = "wb")
}
raw <- read_csv(dest) |> clean_names()
setwd("~/health_project")
library(tidyverse)
library(janitor)
library(skimr)
library(GGally)
raw_url <- "https://raw.githubusercontent.com/selva86/datasets/master/Life_Expectancy_Data.csv"
dest    <- "data/Life_Expectancy_Data.csv"
if (!file.exists(dest)) {
download.file(raw_url, destfile = dest, mode = "wb")
}
raw <- read_csv(dest) |> clean_names()
library(tidyverse)
library(janitor)
library(skimr)
library(GGally)
raw_url <- "https://raw.githubusercontent.com/selva86/datasets/master/Life_Expectancy_Data.csv"
dest    <- "../data/Life_Expectancy_Data.csv"
if (!file.exists(dest)) {
download.file(raw_url, destfile = dest, mode = "wb")
}
raw <- read_csv(dest) |> clean_names()
glimpse(raw)
skim(raw)
# Convert status to factor and year to integer
df_clean <- raw %>%
mutate(status = as.factor(status), year = as.integer(year))
# Select only Developing Countries from this century(up to 2015)
df_clean <- df_clean %>%
filter(status == 'Developing', year >=2000, year <=2015)
# Select variables to focus on
df_clean <- df_clean %>%
select(life_expectancy, adult_mortality, infant_deaths, alcohol,hepatitis_b,
measles,bmi,polio, total_expenditure,diphtheria, hiv_aids, gdp,
population,thinness_1_19_years, schooling )
glimpse(df_clean)
skim(df_clean)
ggplot(df_clean, aes(life_expectancy)) + geom_histogram(bins = 30)
num_only <- df_clean |> select(where(is.numeric)) %>% select(-year)
num_only <- df_clean |> select(where(is.numeric))
ggpairs(num_only[, 1:min(6, ncol(num_only))], progress = FALSE)
write_csv(df_clean, "../data/life_clean.csv")
set.seed(42)
library(tidyverse)
library(broom)
library(MASS)     # stepAIC
library(glmnet)   # LASSO
library(caret)    # train/test split + confusion matrices
library(pROC)     # AUC/ROC
library(yardstick)
life <-read_csv("../data/life_clean.csv")
life <- life %>%
mutate(
low_lifeexp = ifelse(life_expectancy < 65, 1, 0),
low_lifeexp = factor(low_lifeexp, levels = c(0,1))
)
life <- life %>% select(-life_expectancy)
glimpse(life)
life <-read_csv("../data/life_clean.csv")
life <- life %>%
mutate(
low_lifeexp = ifelse(life_expectancy < 60, 1, 0),
low_lifeexp = factor(low_lifeexp, levels = c(0,1))
)
life <- life %>% select(-life_expectancy)
glimpse(life)
life <-read_csv("../data/life_clean.csv")
life <- life %>%
mutate(
low_lifeexp = ifelse(life_expectancy < 60, 1, 0),
low_lifeexp = factor(low_lifeexp, levels = c(0,1))
)
life <- life %>% select(-life_expectancy)
glimpse(life)
skim(life)
life <-read_csv("../data/life_clean.csv")
life <- life %>%
mutate(
low_lifeexp = ifelse(life_expectancy < 60, 1, 0),
low_lifeexp = factor(low_lifeexp, levels = c(0,1))
)
life <- life %>% select(-life_expectancy)
glimpse(life)
life <-read_csv("../data/life_clean.csv")
life <- life %>%
mutate(
low_lifeexp = ifelse(life_expectancy < 60, 1, 0),
low_lifeexp = factor(low_lifeexp, levels = c(0,1))
)
life_clean <- life %>% select(-life_expectancy)
glimpse(life_clean)
set.seed(42)
library(tidyverse)
library(broom)
library(MASS)     # stepAIC
library(glmnet)   # LASSO
library(caret)    # train/test split + confusion matrices
library(pROC)     # AUC/ROC
library(yardstick)
life <-read_csv("../data/life_clean.csv")
life <- life %>%
mutate(
low_lifeexp = ifelse(life_expectancy < 60, 1, 0),
low_lifeexp = factor(low_lifeexp, levels = c(0,1))
)
life_clean <- life %>% select(-life_expectancy)
glimpse(life_clean)
life <-read_csv("../data/life_clean.csv")
life <- life %>%
mutate(
low_lifeexp = ifelse(life_expectancy < 60, 1, 0),
low_lifeexp = factor(low_lifeexp, levels = c(0,1))
)
glimpse(life)
life <- life %>% select(-life_expectancy)
life <-read_csv("../data/life_clean.csv")
life <- life %>%
mutate(
low_lifeexp = ifelse(life_expectancy < 60, 1, 0),
low_lifeexp = factor(low_lifeexp, levels = c(0,1))
)
life <- life %>% dplyr::select(-life_expectancy)
glimpse(life)
set.seed(42)
train_idx <- sample(nrow(life), 0.7*nrow(life))
train <- life[train_idx, ]
test  <- life[-train_idx, ]
base_formula <- as.formula("low_lifeexp ~ .")
m_base <- glm(base_formula, data = train, family = binomial())
m_step_aic <- stepAIC(m_base, direction = "both", trace = FALSE)
n_train <- nrow(train)
m_step_bic <- stepAIC(m_base, direction = "both", k = log(n_train), trace = FALSE)
list(
AIC_selected = formula(m_step_aic),
BIC_selected = formula(m_step_bic)
)
set.seed(42)
train_idx <- sample(nrow(life), 0.7*nrow(life))
train <- life[train_idx, ]
test  <- life[-train_idx, ]
base_formula <- as.formula("low_lifeexp ~ .")
m_base <- glm(base_formula, data = train, family = binomial())
m_step_aic <- stepAIC(m_base, direction = "both", trace = FALSE)
n_train <- nrow(train)
m_step_bic <- stepAIC(m_base, direction = "both", k = log(n_train), trace = FALSE)
list(
AIC_selected = formula(m_step_aic),
BIC_selected = formula(m_step_bic)
)
# Model matrix
x_tr <- model.matrix(base_formula, data = train)[,-1]
y_tr <- as.numeric(train$low_lifeexp) - 0
x_te <- model.matrix(base_formula, data = test)[,-1]
y_te <- as.numeric(test$low_lifeexp) - 0
set.seed(42)
cvfit <- cv.glmnet(
x = x_tr, y = y_tr,
alpha = 1,           # LASSO
family = "binomial",
nfolds = 10
)
coef_lasso <- coef(cvfit, s = "lambda.1se")
lasso_tbl <- tibble(
feature = rownames(coef_lasso),
coef = as.numeric(coef_lasso)
) %>%
filter(feature != "(Intercept)", abs(coef) > 1e-8) %>%
arrange(desc(abs(coef)))
lasso_tbl
life <-read_csv("../data/life_clean.csv")
life <- life %>%
mutate(
low_lifeexp = ifelse(life_expectancy < 60, 1, 0),
low_lifeexp = factor(low_lifeexp, levels = c(0,1))
)
life <- life %>% dplyr::select(-life_expectancy)
glimpse(life)
table(life%low_lifeexp)
life <-read_csv("../data/life_clean.csv")
life <- life %>%
mutate(
low_lifeexp = ifelse(life_expectancy < 60, 1, 0),
low_lifeexp = factor(low_lifeexp, levels = c(0,1))
)
life <- life %>% dplyr::select(-life_expectancy)
glimpse(life)
table(life$low_lifeexp)
life <-read_csv("../data/life_clean.csv")
life <- life %>%
mutate(
low_lifeexp = ifelse(life_expectancy < 65, 1, 0),
low_lifeexp = factor(low_lifeexp, levels = c(0,1))
)
life <- life %>% dplyr::select(-life_expectancy)
glimpse(life)
table(life$low_lifeexp)
set.seed(42)
train_idx <- sample(nrow(life), 0.7*nrow(life))
train <- life[train_idx, ]
test  <- life[-train_idx, ]
base_formula <- as.formula("low_lifeexp ~ .")
m_base <- glm(base_formula, data = train, family = binomial())
m_step_aic <- stepAIC(m_base, direction = "both", trace = FALSE)
n_train <- nrow(train)
m_step_bic <- stepAIC(m_base, direction = "both", k = log(n_train), trace = FALSE)
list(
AIC_selected = formula(m_step_aic),
BIC_selected = formula(m_step_bic)
)
# Model matrix
x_tr <- model.matrix(base_formula, data = train)[,-1]
y_tr <- as.numeric(train$low_lifeexp) - 0
x_te <- model.matrix(base_formula, data = test)[,-1]
y_te <- as.numeric(test$low_lifeexp) - 0
set.seed(42)
cvfit <- cv.glmnet(
x = x_tr, y = y_tr,
alpha = 1,           # LASSO
family = "binomial",
nfolds = 10
)
coef_lasso <- coef(cvfit, s = "lambda.1se")
lasso_tbl <- tibble(
feature = rownames(coef_lasso),
coef = as.numeric(coef_lasso)
) %>%
filter(feature != "(Intercept)", abs(coef) > 1e-8) %>%
arrange(desc(abs(coef)))
lasso_tbl
selected_vars <- lasso_tbl$feature
formula_sel <- as.formula(paste("low_lifeexp ~", paste(selected_vars, collapse = " + ")))
model_final <- glm(formula_sel, data = train, family = binomial())
summary(model_final)
pred_prob <- predict(model_final, test, type = "response")
pred_class <- factor(ifelse(pred_prob >= 0.5, 1, 0), levels = c(0,1))
# Confusion matrix
confusionMatrix(pred_class, test$low_lifeexp)
# AUC
roc_obj <- roc(as.numeric(test$low_lifeexp)-1, pred_prob)
auc(roc_obj)
set.seed(42)
library(tidyverse)
library(broom)
library(MASS)     # stepAIC
library(glmnet)   # LASSO
library(caret)    # train/test split + confusion matrices
library(pROC)     # AUC/ROC
library(yardstick)
life <-read_csv("../data/life_clean.csv")
life <- life %>%
mutate(
low_lifeexp = ifelse(life_expectancy < 65, 1, 0),
low_lifeexp = factor(low_lifeexp, levels = c(0,1))
)
life <- life %>% dplyr::select(-life_expectancy)
glimpse(life)
table(life$low_lifeexp)
set.seed(42)
train_idx <- sample(nrow(life), 0.7*nrow(life))
train <- life[train_idx, ]
test  <- life[-train_idx, ]
base_formula <- as.formula("low_lifeexp ~ .")
m_base <- glm(base_formula, data = train, family = binomial())
m_step_aic <- stepAIC(m_base, direction = "both", trace = FALSE)
n_train <- nrow(train)
m_step_bic <- stepAIC(m_base, direction = "both", k = log(n_train), trace = FALSE)
list(
AIC_selected = formula(m_step_aic),
BIC_selected = formula(m_step_bic)
)
# Model matrix
x_tr <- model.matrix(base_formula, data = train)[,-1]
y_tr <- as.numeric(train$low_lifeexp) - 0
x_te <- model.matrix(base_formula, data = test)[,-1]
y_te <- as.numeric(test$low_lifeexp) - 0
set.seed(42)
cvfit <- cv.glmnet(
x = x_tr, y = y_tr,
alpha = 1,           # LASSO
family = "binomial",
nfolds = 10
)
coef_lasso <- coef(cvfit, s = "lambda.1se")
lasso_tbl <- tibble(
feature = rownames(coef_lasso),
coef = as.numeric(coef_lasso)
) %>%
filter(feature != "(Intercept)", abs(coef) > 1e-8) %>%
arrange(desc(abs(coef)))
lasso_tbl
selected_vars <- lasso_tbl$feature
formula_sel <- as.formula(paste("low_lifeexp ~", paste(selected_vars, collapse = " + ")))
model_final <- glm(formula_sel, data = train, family = binomial())
summary(model_final)
pred_prob <- predict(model_final, test, type = "response")
pred_class <- factor(ifelse(pred_prob >= 0.5, 1, 0), levels = c(0,1))
# Confusion matrix
confusionMatrix(pred_class, test$low_lifeexp)
# AUC
roc_obj <- roc(as.numeric(test$low_lifeexp)-1, pred_prob)
auc(roc_obj)
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
set.seed(42)
library(tidyverse)
library(broom)
library(MASS)     # stepAIC
library(glmnet)   # LASSO
library(caret)    # train/test split + confusion matrices
library(pROC)     # AUC/ROC
# Load cleaned life expectancy dataset
life <- read_csv("../data/life_clean.csv")
# Create binary outcome: 1 if life expectancy < 65, else 0
life <- life %>%
mutate(
low_lifeexp = ifelse(life_expectancy < 65, 1, 0),
low_lifeexp = factor(low_lifeexp, levels = c(0,1))
) %>%
select(-life_expectancy)
# Overview of dataset
glimpse(life)
# Check balance of outcome variable
table(life$low_lifeexp)
# Split data into 70% train, 30% test for later testing
set.seed(42)
train_idx <- sample(nrow(life), 0.7*nrow(life))
train <- life[train_idx, ]
test  <- life[-train_idx, ]
# Base model with all predictors
base_formula <- as.formula("low_lifeexp ~ .")
m_base <- glm(base_formula, data = train, family = binomial())
m_step_aic <- stepAIC(m_base, direction = "both", trace = FALSE)
n_train <- nrow(train)
m_step_bic <- stepAIC(m_base, direction = "both", k = log(n_train), trace = FALSE)
list(
AIC_selected = formula(m_step_aic),
BIC_selected = formula(m_step_bic)
)
# Model matrices for glmnet
x_tr <- model.matrix(base_formula, data = train)[,-1]
y_tr <- as.numeric(train$low_lifeexp) - 0
x_te <- model.matrix(base_formula, data = test)[,-1]
y_te <- as.numeric(test$low_lifeexp) - 0
# 10-fold CV for LASSO
cvfit <- cv.glmnet(
x = x_tr, y = y_tr,
alpha = 1,           # LASSO
family = "binomial",
nfolds = 10
)
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
set.seed(42)
library(tidyverse)
library(broom)
library(MASS)     # stepAIC
library(glmnet)   # LASSO
library(caret)    # train/test split + confusion matrices
library(pROC)     # AUC/ROC
# Load cleaned life expectancy dataset
life <- read_csv("../data/life_clean.csv")
# Create binary outcome: 1 if life expectancy < 65, else 0
life <- life %>%
mutate(
low_lifeexp = ifelse(life_expectancy < 65, 1, 0),
low_lifeexp = factor(low_lifeexp, levels = c(0,1))
) %>%
dplyr::select(-life_expectancy)
# Overview of dataset
glimpse(life)
# Check balance of outcome variable
table(life$low_lifeexp)
# Split data into 70% train, 30% test for later testing
set.seed(42)
train_idx <- sample(nrow(life), 0.7*nrow(life))
train <- life[train_idx, ]
test  <- life[-train_idx, ]
# Base model with all predictors
base_formula <- as.formula("low_lifeexp ~ .")
m_base <- glm(base_formula, data = train, family = binomial())
m_step_aic <- stepAIC(m_base, direction = "both", trace = FALSE)
n_train <- nrow(train)
m_step_bic <- stepAIC(m_base, direction = "both", k = log(n_train), trace = FALSE)
list(
AIC_selected = formula(m_step_aic),
BIC_selected = formula(m_step_bic)
)
# Model matrices for glmnet
x_tr <- model.matrix(base_formula, data = train)[,-1]
y_tr <- as.numeric(train$low_lifeexp) - 0
x_te <- model.matrix(base_formula, data = test)[,-1]
y_te <- as.numeric(test$low_lifeexp) - 0
# 10-fold CV for LASSO
cvfit <- cv.glmnet(
x = x_tr, y = y_tr,
alpha = 1,           # LASSO
family = "binomial",
nfolds = 10
)
# Extract selected coefficients
coef_lasso <- coef(cvfit, s = "lambda.1se")
lasso_tbl <- tibble(
feature = rownames(coef_lasso),
coef = as.numeric(coef_lasso)
) %>%
filter(feature != "(Intercept)", abs(coef) > 1e-8) %>%
arrange(desc(abs(coef)))
lasso_tbl
# Fit final logistic regression using LASSO-selected variables
selected_vars <- lasso_tbl$feature
formula_sel <- as.formula(paste("low_lifeexp ~", paste(selected_vars, collapse = " + ")))
model_final <- glm(formula_sel, data = train, family = binomial())
summary(model_final)
# Predictions on test set
pred_prob <- predict(model_final, test, type = "response")
pred_class <- factor(ifelse(pred_prob >= 0.5, 1, 0), levels = c(0,1))
# Confusion matrix
confusionMatrix(pred_class, test$low_lifeexp)
# AUC
roc_obj <- roc(as.numeric(test$low_lifeexp)-1, pred_prob)
auc(roc_obj)
library(tidyverse)
library(janitor)
library(skimr)
library(GGally)
raw_url <- "https://raw.githubusercontent.com/selva86/datasets/master/Life_Expectancy_Data.csv"
dest    <- "../data/Life_Expectancy_Data.csv"
if (!file.exists(dest)) {
download.file(raw_url, destfile = dest, mode = "wb")
}
raw <- read_csv(dest) |> clean_names()
glimpse(raw)
skim(raw)
# Convert status to factor and year to integer
df_clean <- raw %>%
mutate(status = as.factor(status), year = as.integer(year))
# Select only Developing Countries from this century(up to 2015)
df_clean <- df_clean %>%
filter(status == 'Developing', year >=2000, year <=2015)
# Select variables to focus on
df_clean <- df_clean %>%
select(life_expectancy, adult_mortality, infant_deaths, alcohol,hepatitis_b,
measles,bmi,polio, total_expenditure,diphtheria, hiv_aids, gdp,
population,thinness_1_19_years, schooling )
glimpse(df_clean)
ggplot(df_clean, aes(life_expectancy)) + geom_histogram(bins = 30)
num_only <- df_clean |> select(where(is.numeric))
ggpairs(num_only[, 1:min(6, ncol(num_only))], progress = FALSE)
write_csv(df_clean, "../data/life_clean.csv")
